// Code generated by goctl. DO NOT EDIT.

package userAuthModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userAuthsFieldNames          = builder.RawFieldNames(&UserAuths{}, true)
	userAuthsRows                = strings.Join(userAuthsFieldNames, ",")
	userAuthsRowsExpectAutoSet   = strings.Join(stringx.Remove(userAuthsFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	userAuthsRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(userAuthsFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))

	cachePublicUserAuthsIdPrefix                 = "cache:public:userAuths:id:"
	cachePublicUserAuthsUserIdIdentityKindPrefix = "cache:public:userAuths:userId:identityKind:"
)

type (
	userAuthsModel interface {
		Insert(ctx context.Context, data *UserAuths) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserAuths, error)
		FindOneByUserIdIdentityKind(ctx context.Context, userId int64, identityKind int64) (*UserAuths, error)
		Update(ctx context.Context, data *UserAuths) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserAuthsModel struct {
		sqlc.CachedConn
		table string
	}

	UserAuths struct {
		Id           int64          `db:"id"`
		UserId       int64          `db:"user_id"`
		IdentityKind int64          `db:"identity_kind"`
		Identifier   string         `db:"identifier"`
		Credential   string         `db:"credential"`
		CreatedAt    time.Time      `db:"created_at"`
		UpdatedAt    time.Time      `db:"updated_at"`
		DeletedAt    sql.NullTime   `db:"deleted_at"`
		Verified     int64          `db:"verified"`
		Ip           sql.NullString `db:"ip"`
		IpLocation   sql.NullString `db:"ip_location"`
	}
)

func newUserAuthsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUserAuthsModel {
	return &defaultUserAuthsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      `"public"."user_auths"`,
	}
}

func (m *defaultUserAuthsModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	publicUserAuthsIdKey := fmt.Sprintf("%s%v", cachePublicUserAuthsIdPrefix, id)
	publicUserAuthsUserIdIdentityKindKey := fmt.Sprintf("%s%v:%v", cachePublicUserAuthsUserIdIdentityKindPrefix, data.UserId, data.IdentityKind)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where id = $1", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, publicUserAuthsIdKey, publicUserAuthsUserIdIdentityKindKey)
	return err
}

func (m *defaultUserAuthsModel) FindOne(ctx context.Context, id int64) (*UserAuths, error) {
	publicUserAuthsIdKey := fmt.Sprintf("%s%v", cachePublicUserAuthsIdPrefix, id)
	var resp UserAuths
	err := m.QueryRowCtx(ctx, &resp, publicUserAuthsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", userAuthsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserAuthsModel) FindOneByUserIdIdentityKind(ctx context.Context, userId int64, identityKind int64) (*UserAuths, error) {
	publicUserAuthsUserIdIdentityKindKey := fmt.Sprintf("%s%v:%v", cachePublicUserAuthsUserIdIdentityKindPrefix, userId, identityKind)
	var resp UserAuths
	err := m.QueryRowIndexCtx(ctx, &resp, publicUserAuthsUserIdIdentityKindKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where user_id = $1 and identity_kind = $2 limit 1", userAuthsRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, userId, identityKind); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserAuthsModel) Insert(ctx context.Context, data *UserAuths) (sql.Result, error) {
	publicUserAuthsIdKey := fmt.Sprintf("%s%v", cachePublicUserAuthsIdPrefix, data.Id)
	publicUserAuthsUserIdIdentityKindKey := fmt.Sprintf("%s%v:%v", cachePublicUserAuthsUserIdIdentityKindPrefix, data.UserId, data.IdentityKind)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8)", m.table, userAuthsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.IdentityKind, data.Identifier, data.Credential, data.DeletedAt, data.Verified, data.Ip, data.IpLocation)
	}, publicUserAuthsIdKey, publicUserAuthsUserIdIdentityKindKey)
	return ret, err
}

func (m *defaultUserAuthsModel) Update(ctx context.Context, newData *UserAuths) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	publicUserAuthsIdKey := fmt.Sprintf("%s%v", cachePublicUserAuthsIdPrefix, data.Id)
	publicUserAuthsUserIdIdentityKindKey := fmt.Sprintf("%s%v:%v", cachePublicUserAuthsUserIdIdentityKindPrefix, data.UserId, data.IdentityKind)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, userAuthsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Id, newData.UserId, newData.IdentityKind, newData.Identifier, newData.Credential, newData.DeletedAt, newData.Verified, newData.Ip, newData.IpLocation)
	}, publicUserAuthsIdKey, publicUserAuthsUserIdIdentityKindKey)
	return err
}

func (m *defaultUserAuthsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cachePublicUserAuthsIdPrefix, primary)
}

func (m *defaultUserAuthsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", userAuthsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserAuthsModel) tableName() string {
	return m.table
}
